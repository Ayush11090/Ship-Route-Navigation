import plotly.graph_objects as go

def plot_subgraph( a_star_path):
    """Visualize subgraph and A* path using Plotly on a 3D globe"""
   
    
    path_lons = [n[0] for n in a_star_path]
    path_lats = [n[1] for n in a_star_path]

    edge_lons, edge_lats = [], []

    fig = go.Figure()

    fig.add_trace(go.Scattergeo(
        lon=edge_lons, lat=edge_lats,
        mode='lines', line=dict(width=0.5, color='gray'),
        name='Shipping Routes'
    ))


    fig.add_trace(go.Scattergeo(
        lon=path_lons, lat=path_lats,
        mode='lines+markers', line=dict(width=2, color='red'),
        marker=dict(size=4, color='red'),
        name='Optimal Path'
    ))

    fig.update_layout(
        geo=dict(
            projection_type='orthographic',
            showland=True,
            landcolor='rgb(100, 100, 100)',
            oceancolor='rgb(0, 0, 80)',
            showocean=True,
            showcountries=True,
            countrycolor='rgb(200, 200, 200)'
        ),
        title='Marine Navigation Network with Optimal Route',
        width=1200,
        height=800
    )
    fig.show()

if __name__ == "__main__":
    plot_subgraph([(145.0000000000076, -42.47747747747787), (144.5495495495571, -42.927927927928316), (144.0990990991066, -43.37837837837876), (143.64864864865618, -43.82882882882921), (143.19819819820574, -44.279279279279656), (142.74774774775526, -44.7297297297301), (142.29729729730477, -45.18018018018055), (141.84684684685433, -45.630630630630996), (142.29729729730477, -46.08108108108144), (142.74774774775526, -46.53153153153189), (142.29729729730477, -46.98198198198234), (141.84684684685433, -47.43243243243278), (141.3963963964039, -47.88288288288323), (141.84684684685433, -48.33333333333368), (142.29729729730477, -48.78378378378412), (142.74774774775526, -49.23423423423457), (143.19819819820574, -49.68468468468502), (142.74774774775526, -50.135135135135464), (142.29729729730477, -50.58558558558591), (141.84684684685433, -51.03603603603636), (141.3963963964039, -51.486486486486804), (140.9459459459534, -51.93693693693725), (140.49549549550292, -52.3873873873877), (140.9459459459534, -52.837837837838144), (141.3963963964039, -53.28828828828859), (141.84684684685433, -53.73873873873904), (141.3963963964039, -54.189189189189484), (141.3963963964039, -54.63963963963993), (140.9459459459534, -55.09009009009038), (140.49549549550292, -55.540540540540825), (140.0450450450525, -55.99099099099127), (139.59459459460206, -56.44144144144172), (139.14414414415157, -56.891891891892165), (138.69369369370108, -57.34234234234261), (139.14414414415157, -57.79279279279306), (139.59459459460206, -58.243243243243505), (140.0450450450525, -58.69369369369395), (140.49549549550292, -59.1441441441444), (140.9459459459534, -59.594594594594845), (141.3963963964039, -60.04504504504529), (141.84684684685433, -60.49549549549574), (141.84684684685433, -60.945945945946185), (142.29729729730477, -61.39639639639663), (142.74774774775526, -61.84684684684708), (142.29729729730477, -62.297297297297526), (141.84684684685433, -62.74774774774797), (141.3963963964039, -63.19819819819842), (140.9459459459534, -63.648648648648866), (140.49549549550292, -64.0990990990993), (140.49549549550292, -64.54954954954975), (140.0450450450525, -65.0000000000002), (140.49549549550292, -65.45045045045065), (140.9459459459534, -65.90090090090109), (141.3963963964039, -65.90090090090109), (141.84684684685433, -65.90090090090109), (142.29729729730477, -65.90090090090109), (142.74774774775526, -65.90090090090109), (143.19819819820574, -65.45045045045065), (143.64864864865618, -65.0000000000002), (144.0990990991066, -65.45045045045065), (144.5495495495571, -65.45045045045065), (145.0000000000076, -65.90090090090109), (145.45045045045802, -65.90090090090109), (145.90090090090845, -66.35135135135154), (146.35135135135894, -66.80180180180199)])